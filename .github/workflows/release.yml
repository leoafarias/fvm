name: Deploy Release

on:
  release:
    types: [published]
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to deploy (e.g., v4.0.0-beta.2)'
        required: true

env:
  PUB_CREDENTIALS: ${{ secrets.PUB_CREDENTIALS }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from release or input
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.release_tag }}"
          fi
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "üöÄ Preparing release for version: $VERSION"

      - name: Update pubspec.yaml version
        run: |
          echo "üìù Updating pubspec.yaml version to $RELEASE_VERSION"
          sed -i "s/^version: .*/version: $RELEASE_VERSION/" pubspec.yaml
          echo "‚úÖ Updated version:"
          grep "^version:" pubspec.yaml

      - name: Prepare environment
        uses: ./.github/actions/prepare

      - name: Generate version.dart
        run: |
          echo "üî® Generating version.dart with build_runner"
          dart run build_runner build --delete-conflicting-outputs
          echo "‚úÖ Generated version.dart content:"
          cat lib/src/version.dart

      - name: Update CHANGELOG with release link
        run: |
          echo "üìù Adding $RELEASE_VERSION entry to CHANGELOG.md"
          TODAY=$(date +%Y-%m-%d)
          awk -v version="$RELEASE_VERSION" -v date="$TODAY" '
            /^## \[Unreleased\]/ { 
              print; print ""; 
              print "## [" version "] - " date; print ""; 
              print "See [Release Notes](https://github.com/leoafarias/fvm/releases/tag/v" version ")"; print ""; 
              next 
            } 1' CHANGELOG.md > temp_changelog && mv temp_changelog CHANGELOG.md
          echo "‚úÖ Added $RELEASE_VERSION to CHANGELOG.md"
          echo "üìã CHANGELOG.md preview:"
          head -12 CHANGELOG.md

      - name: Commit version updates locally
        run: |
          echo "üìù Committing version updates locally"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pubspec.yaml lib/src/version.dart CHANGELOG.md
          git commit -m "chore: update version to $RELEASE_VERSION for release" || echo "No changes to commit"
          echo "‚úÖ Changes committed locally"

      - name: Validate pub.dev package (dry run)
        run: |
          echo "üîç Validating package for pub.dev..."
          dart pub publish --dry-run
          echo "‚úÖ Package validation successful!"

      - name: Push version updates to main
        run: |
          echo "üì§ Pushing version updates to main branch"
          git push origin main
          echo "‚úÖ Changes pushed to main branch"

  test:
    name: Test
    needs: prepare-release
    uses: ./.github/workflows/test.yml

  deploy:
    name: Deploy Core
    needs: [prepare-release, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version from prepare-release
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "üöÄ Deploying version: $VERSION"

      - name: Prepare environment
        uses: ./.github/actions/prepare

      - name: Generate code with build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      # Skip pkg-github-release - release already exists
      - name: Deploy Linux binaries to existing release
        run: dart run grinder pkg-github-linux

      - name: Deploy to Pub
        run: dart run grinder pkg-pub-deploy

  deploy-windows:
    name: Deploy Windows
    runs-on: windows-latest
    needs: [prepare-release, test]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CHOCOLATEY_TOKEN: ${{ secrets.CHOCOLATEY_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version from prepare-release
        run: |
          $VERSION = "${{ needs.prepare-release.outputs.version }}"
          echo "RELEASE_VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "üîÑ Deploying Windows for version: $VERSION"

      - name: Prepare environment
        uses: ./.github/actions/prepare

      - name: Generate code with build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Deploy Windows binaries to existing release
        run: dart run grinder pkg-github-windows

      - name: Deploy Chocolatey
        run: dart run grinder pkg-chocolatey-deploy

  deploy-macos:
    name: Deploy macOS
    runs-on: macos-latest
    needs: [prepare-release, test]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version from prepare-release
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "üîÑ Deploying macOS for version: $VERSION"

      - name: Prepare environment
        uses: ./.github/actions/prepare

      - name: Generate code with build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Deploy macOS binaries to existing release
        run: dart run grinder pkg-github-macos

      - name: Deploy versioned Homebrew formula
        run: dart run grinder pkg-homebrew-update --versioned-formula
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_FVM_GH_TOKEN }}

      - name: Deploy Homebrew
        run: dart run grinder pkg-homebrew-update
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_FVM_GH_TOKEN }}

  deploy-docker:
    name: Deploy Docker
    runs-on: ubuntu-latest
    needs: [prepare-release, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version for Docker
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "üê≥ Building Docker image for version: $VERSION"

      - name: Prepare environment
        uses: ./.github/actions/prepare

      - name: Generate code with build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: ./.docker/Dockerfile
          push: true
          tags: leoafarias/fvm:${{ env.RELEASE_VERSION }}
          build-args: |
            FVM_VERSION=${{ env.RELEASE_VERSION }}
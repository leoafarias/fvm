name: Install Script Tests

on:
  push:
    paths:
      - 'scripts/install.sh'
      - '.github/workflows/install-script-test.yml'
  pull_request:
    paths:
      - 'scripts/install.sh'
      - '.github/workflows/install-script-test.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-install-script:
    name: Test Install Script on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            expected_os: linux
          - os: macos-latest
            expected_os: macos

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # Create a temporary directory for testing
          mkdir -p ~/test-install
          cd ~/test-install
          
          # Copy the install script
          cp ${{ github.workspace }}/scripts/install.sh ./install.sh
          chmod +x ./install.sh

      - name: Test script validation (dry run checks)
        run: |
          cd ~/test-install
          
          # Test OS detection
          echo "Testing OS detection..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            expected_os="linux"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            expected_os="macos"
          fi
          
          # Extract OS detection logic and verify
          detected_os=$(bash -c 'OS="$(uname -s)"; case "$OS" in Linux*) echo "linux" ;; Darwin*) echo "macos" ;; *) echo "unknown" ;; esac')
          echo "Detected OS: $detected_os"
          echo "Expected OS: $expected_os"
          
          if [[ "$detected_os" != "$expected_os" ]]; then
            echo "❌ OS detection failed"
            exit 1
          fi
          echo "✅ OS detection passed"

      - name: Test architecture detection
        run: |
          cd ~/test-install
          
          # Test architecture detection
          echo "Testing architecture detection..."
          detected_arch=$(bash -c 'ARCH="$(uname -m)"; case "$ARCH" in x86_64) echo "x64" ;; arm64|aarch64) echo "arm64" ;; *) echo "unsupported" ;; esac')
          echo "Detected architecture: $detected_arch"
          
          if [[ "$detected_arch" == "unsupported" ]]; then
            echo "❌ Architecture detection failed"
            exit 1
          fi
          echo "✅ Architecture detection passed"

      - name: Test dependency checks
        run: |
          cd ~/test-install
          
          # Test curl availability
          echo "Testing curl availability..."
          if ! command -v curl &>/dev/null; then
            echo "❌ curl not available"
            exit 1
          fi
          echo "✅ curl available"
          
          # Test sudo/doas availability
          echo "Testing privilege escalation tools..."
          if ! command -v sudo &>/dev/null && ! command -v doas &>/dev/null; then
            echo "❌ Neither sudo nor doas available"
            exit 1
          fi
          echo "✅ Privilege escalation tool available"

      - name: Test version fetching
        run: |
          cd ~/test-install
          
          # Test latest version fetching
          echo "Testing latest version fetching..."
          latest_version=$(curl -s https://api.github.com/repos/leoafarias/fvm/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          if [[ -z "$latest_version" ]]; then
            echo "❌ Failed to fetch latest version"
            exit 1
          fi
          
          echo "Latest version: $latest_version"
          echo "✅ Version fetching passed"

      - name: Test fresh installation
        run: |
          cd ~/test-install
          
          echo "Testing fresh installation..."
          
          # Run the install script
          if ! sudo ./install.sh; then
            echo "❌ Fresh installation failed"
            exit 1
          fi
          
          # Verify installation
          if ! command -v fvm &>/dev/null; then
            echo "❌ FVM command not available after installation"
            exit 1
          fi
          
          # Test FVM functionality
          if ! fvm --version; then
            echo "❌ FVM version command failed"
            exit 1
          fi
          
          echo "✅ Fresh installation passed"

      - name: Test upgrade installation
        run: |
          cd ~/test-install
          
          echo "Testing upgrade installation..."
          
          # Run the install script again to test upgrade scenario
          if ! sudo ./install.sh; then
            echo "❌ Upgrade installation failed"
            exit 1
          fi
          
          # Verify FVM still works
          if ! fvm --version; then
            echo "❌ FVM version command failed after upgrade"
            exit 1
          fi
          
          echo "✅ Upgrade installation passed"

      - name: Test specific version installation
        run: |
          cd ~/test-install
          
          echo "Testing specific version installation..."
          
          # Install a specific version (using a known stable version)
          if ! sudo ./install.sh 3.2.0; then
            echo "❌ Specific version installation failed"
            exit 1
          fi
          
          # Verify the version
          installed_version=$(fvm --version 2>&1 || echo "failed")
          echo "Installed version output: $installed_version"
          
          if [[ "$installed_version" == "failed" ]]; then
            echo "❌ FVM version command failed after specific version install"
            exit 1
          fi
          
          echo "✅ Specific version installation passed"

      - name: Test error handling
        run: |
          cd ~/test-install
          
          echo "Testing error handling..."
          
          # Test invalid version format
          if sudo ./install.sh "invalid/version"; then
            echo "❌ Script should have failed with invalid version"
            exit 1
          fi
          
          echo "✅ Error handling passed"

      - name: Cleanup test installation
        if: always()
        run: |
          echo "Cleaning up test installation..."
          
          # Remove FVM installation
          sudo rm -rf ~/.fvm_flutter
          sudo rm -f /usr/local/bin/fvm
          
          # Clean up test directory
          rm -rf ~/test-install
          
          echo "✅ Cleanup completed"

  test-multi-shell:
    name: Test Multi-Shell Support on ${{ matrix.os }} with ${{ matrix.shell }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        shell: [bash, zsh, fish]
        include:
          - os: ubuntu-latest
            shell: bash
            config_file: ~/.bashrc
            export_cmd: 'export PATH=$HOME/.fvm_flutter/bin:$PATH'
          - os: ubuntu-latest
            shell: zsh
            config_file: ~/.zshrc
            export_cmd: 'export PATH="$HOME/.fvm_flutter/bin:$PATH"'
          - os: ubuntu-latest
            shell: fish
            config_file: ~/.config/fish/config.fish
            export_cmd: 'set --export PATH $HOME/.fvm_flutter/bin $PATH'
          - os: macos-latest
            shell: bash
            config_file: ~/.bash_profile
            export_cmd: 'export PATH=$HOME/.fvm_flutter/bin:$PATH'
          - os: macos-latest
            shell: zsh
            config_file: ~/.zshrc
            export_cmd: 'export PATH="$HOME/.fvm_flutter/bin:$PATH"'
          - os: macos-latest
            shell: fish
            config_file: ~/.config/fish/config.fish
            export_cmd: 'set --export PATH $HOME/.fvm_flutter/bin $PATH'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install shell (${{ matrix.shell }})
        run: |
          case "${{ matrix.shell }}" in
            bash)
              echo "✅ Bash is pre-installed"
              ;;
            zsh)
              if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
                sudo apt-get update
                sudo apt-get install -y zsh
              else
                echo "✅ Zsh is pre-installed on macOS"
              fi
              ;;
            fish)
              if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
                sudo apt-get update
                sudo apt-get install -y fish
              else
                brew install fish
              fi
              ;;
          esac

          # Verify shell installation
          which ${{ matrix.shell }}
          ${{ matrix.shell }} --version

      - name: Setup shell environment
        run: |
          # Create config directory if needed (for fish)
          if [[ "${{ matrix.shell }}" == "fish" ]]; then
            mkdir -p ~/.config/fish
          fi

          # Create config file if it doesn't exist
          touch "${{ matrix.config_file }}"

          echo "Shell config file: ${{ matrix.config_file }}"
          echo "Expected export command: ${{ matrix.export_cmd }}"

      - name: Test install script with shell configuration
        run: |
          # Copy install script to test directory
          mkdir -p ~/test-shell-install
          cd ~/test-shell-install
          cp ${{ github.workspace }}/scripts/install.sh ./install.sh
          chmod +x ./install.sh

          # Set SHELL environment variable to test specific shell
          export SHELL=$(which ${{ matrix.shell }})
          echo "Testing with SHELL=$SHELL"

          # Run install script
          sudo -E ./install.sh

      - name: Verify shell configuration was added
        run: |
          echo "Checking if FVM path was added to ${{ matrix.config_file }}..."

          if grep -q "$HOME/.fvm_flutter/bin" "${{ matrix.config_file }}"; then
            echo "✅ FVM path found in shell config"
            echo "Config file contents:"
            cat "${{ matrix.config_file }}"
          else
            echo "❌ FVM path not found in shell config"
            echo "Config file contents:"
            cat "${{ matrix.config_file }}" || echo "Config file does not exist"
            exit 1
          fi

      - name: Test shell can execute FVM
        run: |
          echo "Testing FVM execution in ${{ matrix.shell }} shell..."

          case "${{ matrix.shell }}" in
            bash)
              bash -c "source ${{ matrix.config_file }} && which fvm && fvm --version"
              ;;
            zsh)
              zsh -c "source ${{ matrix.config_file }} && which fvm && fvm --version"
              ;;
            fish)
              fish -c "source ${{ matrix.config_file }} && which fvm && fvm --version"
              ;;
          esac

          echo "✅ ${{ matrix.shell }} can successfully execute FVM"

      - name: Verify correct export syntax
        run: |
          echo "Verifying shell-specific export syntax..."

          case "${{ matrix.shell }}" in
            bash)
              if grep -q "export PATH.*\.fvm_flutter/bin" "${{ matrix.config_file }}"; then
                echo "✅ Correct bash export syntax found"
              else
                echo "❌ Incorrect bash export syntax"
                exit 1
              fi
              ;;
            zsh)
              if grep -q 'export PATH=".*\.fvm_flutter/bin' "${{ matrix.config_file }}"; then
                echo "✅ Correct zsh export syntax found"
              else
                echo "❌ Incorrect zsh export syntax"
                exit 1
              fi
              ;;
            fish)
              if grep -q "set --export PATH.*\.fvm_flutter/bin" "${{ matrix.config_file }}"; then
                echo "✅ Correct fish export syntax found"
              else
                echo "❌ Incorrect fish export syntax"
                exit 1
              fi
              ;;
          esac

      - name: Cleanup shell test
        if: always()
        run: |
          echo "Cleaning up shell test..."

          # Remove FVM installation
          sudo rm -rf ~/.fvm_flutter
          sudo rm -f /usr/local/bin/fvm

          # Clean up test directory
          rm -rf ~/test-shell-install

          # Remove FVM entries from shell config (restore original state)
          if [[ -f "${{ matrix.config_file }}" ]]; then
            # Create backup
            cp "${{ matrix.config_file }}" "${{ matrix.config_file }}.backup"

            # Remove FVM section (from # FVM comment to end of file or next comment)
            sed -i '/^# FVM$/,/^$/d' "${{ matrix.config_file }}" || true
            sed -i '/\.fvm_flutter/d' "${{ matrix.config_file }}" || true
          fi

          echo "✅ Shell test cleanup completed"

  test-script-quality:
    name: Test Script Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck on install script
        run: |
          echo "Running shellcheck on install.sh..."
          shellcheck scripts/install.sh
          echo "✅ Shellcheck passed"

      - name: Test script syntax
        run: |
          echo "Testing script syntax..."
          bash -n scripts/install.sh
          echo "✅ Syntax check passed"

      - name: Verify script consistency
        run: |
          echo "Verifying script internal consistency..."

          # Check script has proper structure and required functions
          if ! grep -q "tildify()" scripts/install.sh; then
            echo "❌ Missing tildify() function"
            exit 1
          fi

          if ! grep -q "This script should not be run as root" scripts/install.sh; then
            echo "❌ Missing root user check"
            exit 1
          fi

          # Check for essential logging functions
          if ! grep -q "^success()" scripts/install.sh; then
            echo "❌ Missing success() function"
            exit 1
          fi

          if ! grep -q "^error()" scripts/install.sh; then
            echo "❌ Missing error() function"
            exit 1
          fi

          # Check for OS/architecture detection
          if ! grep -q "uname -s" scripts/install.sh; then
            echo "❌ Missing OS detection"
            exit 1
          fi

          if ! grep -q "uname -m" scripts/install.sh; then
            echo "❌ Missing architecture detection"
            exit 1
          fi

          echo "✅ Script internal consistency verified"

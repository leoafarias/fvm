name: Test Install Script

on:
  push:
    paths:
      - 'scripts/install.sh'
      - '.github/workflows/test-install.yml'
  pull_request:
    paths:
      - 'scripts/install.sh'
      - '.github/workflows/test-install.yml'
  workflow_dispatch:

jobs:
  # Basic validation
  validate:
    name: Validate Script
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install shellcheck
        run: |
          # Only install if not already available (for act compatibility)
          if ! command -v shellcheck &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y shellcheck
          fi
      - name: Run shellcheck
        run: shellcheck scripts/install.sh

      - name: Check install.sh synchronization
        run: |
          echo "Checking that scripts/install.sh matches docs/public/install.sh..."
          if ! diff -q scripts/install.sh docs/public/install.sh; then
            echo "❌ ERROR: scripts/install.sh and docs/public/install.sh are different!"
            echo "Please ensure both files are synchronized."
            diff scripts/install.sh docs/public/install.sh || true
            exit 1
          fi
          echo "✅ install.sh files are synchronized"

      - name: Check uninstall.sh synchronization
        run: |
          echo "Checking that scripts/uninstall.sh matches docs/public/uninstall.sh..."
          if ! diff -q scripts/uninstall.sh docs/public/uninstall.sh; then
            echo "❌ ERROR: scripts/uninstall.sh and docs/public/uninstall.sh are different!"
            echo "Please ensure both files are synchronized."
            diff scripts/uninstall.sh docs/public/uninstall.sh || true
            exit 1
          fi
          echo "✅ uninstall.sh files are synchronized"

      - name: Check Dockerfile install script URL
        run: |
          echo "Checking Dockerfile references correct install script URL..."
          EXPECTED_URL="https://raw.githubusercontent.com/leoafarias/fvm/main/scripts/install.sh"
          if ! grep -q "$EXPECTED_URL" .docker/Dockerfile 2>/dev/null; then
            echo "⚠️  WARNING: Dockerfile doesn't reference expected URL: $EXPECTED_URL"
            echo "This might be intentional for development. Skipping..."
          else
            echo "✅ Dockerfile references correct install script URL"
          fi

      - name: Validate grinder task
        run: |
          echo "Checking grinder task configuration..."
          if ! grep -q "Move install and uninstall scripts to public directory" tool/grind.dart; then
            echo "❌ ERROR: Grinder task description not found"
            exit 1
          fi
          if ! grep -q "scripts/install.sh" tool/grind.dart; then
            echo "❌ ERROR: Grinder doesn't reference scripts/install.sh"
            exit 1
          fi
          if ! grep -q "scripts/uninstall.sh" tool/grind.dart; then
            echo "❌ ERROR: Grinder doesn't reference scripts/uninstall.sh"
            exit 1
          fi
          echo "✅ Grinder task properly configured"

  # Test on major platforms
  test-install:
    name: Install - ${{ matrix.name }}
    needs: validate
    strategy:
      matrix:
        include:
          - name: Ubuntu x64
            os: ubuntu-latest
          - name: macOS Intel
            os: macos-latest
          - name: macOS ARM64
            os: macos-13
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Test installation
        run: |
          ./scripts/install.sh
          export PATH="$HOME/.fvm_flutter/bin:$PATH"
          fvm --version

      - name: Test reinstall (idempotency)
        run: |
          ./scripts/install.sh
          export PATH="$HOME/.fvm_flutter/bin:$PATH"
          fvm --version

  # Test Alpine (musl libc)
  test-alpine:
    name: Alpine (musl)
    needs: validate
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apk add --no-cache bash curl tar

      - name: Test musl installation
        run: |
          ./scripts/install.sh
          ~/.fvm_flutter/bin/fvm --version

  # Test environment variables
  test-env-vars:
    name: Environment Variables
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test FVM_NO_PATH
        run: |
          FVM_NO_PATH=true ./scripts/install.sh
          # Should NOT modify shell configs
          if grep -q fvm_flutter ~/.bashrc ~/.bash_profile 2>/dev/null; then
            echo "❌ FVM_NO_PATH didn't work - shell config was modified"
            exit 1
          fi
          echo "✅ FVM_NO_PATH works - shell config not modified"
          ~/.fvm_flutter/bin/fvm --version

      - name: Test FVM_DIR
        run: |
          rm -rf ~/.fvm_flutter
          FVM_DIR=/tmp/custom_fvm ./scripts/install.sh
          if [[ ! -f /tmp/custom_fvm/bin/fvm ]]; then
            echo "❌ FVM_DIR didn't work"
            exit 1
          fi
          echo "✅ FVM_DIR works - installed to custom location"
          /tmp/custom_fvm/bin/fvm --version

      - name: Test v prefix stripping
        run: |
          rm -rf ~/.fvm_flutter /tmp/custom_fvm
          ./scripts/install.sh v3.2.1
          if ! ~/.fvm_flutter/bin/fvm --version | grep -q "3.2.1"; then
            echo "❌ v prefix stripping didn't work"
            exit 1
          fi
          echo "✅ v prefix stripping works"

  # Test container detection and root permissions
  test-container:
    name: Container Root
    needs: validate
    runs-on: ubuntu-latest
    container: ubuntu:latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y curl tar gzip

      - name: Test container root allowed
        run: |
          ./scripts/install.sh
          export PATH="$HOME/.fvm_flutter/bin:$PATH"
          fvm --version

  # Test root blocking on non-container
  test-permissions:
    name: Root Blocking
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test root blocked
        run: |
          # Should fail when run as root without container
          if sudo ./scripts/install.sh 2>&1 | grep -q "should not be run as root"; then
            echo "✅ Root correctly blocked"
          else
            echo "❌ Root should have been blocked"
            exit 1
          fi

      - name: Test with override
        run: |
          sudo env FVM_ALLOW_ROOT=true ./scripts/install.sh
          sudo /root/.fvm_flutter/bin/fvm --version

  # Test uninstall
  test-uninstall:
    name: Uninstall
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install FVM
        run: |
          ./scripts/install.sh
          export PATH="$HOME/.fvm_flutter/bin:$PATH"
          which fvm
          fvm --version

      - name: Uninstall FVM
        run: |
          export PATH="$HOME/.fvm_flutter/bin:$PATH"
          ./scripts/uninstall.sh

      - name: Verify uninstall
        run: |
          if command -v fvm &>/dev/null; then
            echo "❌ FVM command still exists after uninstall"
            exit 1
          fi
          if [[ -d ~/.fvm_flutter ]]; then
            echo "❌ FVM directory still exists after uninstall"
            exit 1
          fi
          echo "✅ FVM successfully uninstalled"

      - name: Test uninstall idempotency
        run: |
          # Run uninstall again - should handle gracefully
          ./scripts/uninstall.sh
